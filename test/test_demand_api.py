# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import
import unittest
from unittest.mock import patch
import elexonpy
from elexonpy.api.demand_api import DemandApi  # noqa: E501
from elexonpy.rest import ApiException


class TestDemandApi(unittest.TestCase):
    """DemandApi unit test stubs"""

    def setUp(self):
        self.api = DemandApi()  # noqa: E501

    def tearDown(self):
        pass

    @patch('elexonpy.api.demand_api.DemandApi.demand_actual_total_get')
    def test_demand_actual_total_get(self, mock_demand_actual_total_get):
        """Test case for demand_actual_total_get

        Actual total load (ATL/B0610)
        """

        mock_response = {
            'success': True,
            'data': [
                {
                    'settlementDate': '2024-07-12',
                    'settlementPeriod': 1,
                    'actualTotalLoad': 35000
                }
            ]
        }
        mock_demand_actual_total_get.return_value = mock_response

        response = self.api.demand_actual_total_get()

        # Assert
        self.assertTrue(response['success'])
        self.assertEqual(len(response['data']), 1)
        self.assertEqual(response['data'][0]['actualTotalLoad'], 35000)

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_daily_get')
    def test_demand_outturn_daily_get(self, mock_demand_outturn_daily_get):
        """Test case for demand_outturn_daily_get

        Initial National Demand outturn per day (INDOD)
        """

        mock_response = {
            'success': True,
            'data': [
                {
                    'publishTime': '2024-07-12T00:00:00Z',
                    'settlementDate': '2024-07-11',
                    'initialDemandOutturn': 750000
                }
            ]
        }
        mock_demand_outturn_daily_get.return_value = mock_response


        response = self.api.demand_outturn_daily_get()

        # Assert
        self.assertTrue(response['success'])
        self.assertEqual(len(response['data']), 1)
        self.assertEqual(response['data'][0]['initialDemandOutturn'], 750000)

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_daily_stream_get')
    def test_demand_outturn_daily_stream_get(self, mock_stream_get):
        """Test case for demand_outturn_daily_stream_get

        Initial National Demand outturn per day (INDOD) stream
        """

        mock_data = [
            {
                'publishTime': '2024-07-12T00:00:00Z',
                'settlementDate': '2024-07-11',
                'initialDemandOutturn': 750000
            },
            {
                'publishTime': '2024-07-13T00:00:00Z',
                'settlementDate': '2024-07-12',
                'initialDemandOutturn': 760000
            }
        ]
        mock_stream_get.return_value = iter(mock_data)


        response = self.api.demand_outturn_daily_stream_get()

        # Assert
        self.assertTrue(hasattr(response, '__iter__'))  # Check if it's iterable

        data_list = list(response)  # Convert iterator to list
        self.assertEqual(len(data_list), 2)
        self.assertEqual(data_list[0]['initialDemandOutturn'], 750000)
        self.assertEqual(data_list[1]['initialDemandOutturn'], 760000)

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_daily_stream_get')
    def test_demand_outturn_daily_stream_get_empty(self, mock_stream_get):
        """Test case for demand_outturn_daily_stream_get with empty response"""

        mock_stream_get.return_value = iter([])

        response = self.api.demand_outturn_daily_stream_get()

        # Assert
        self.assertTrue(hasattr(response, '__iter__'))
        self.assertEqual(list(response), [])

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_daily_stream_get')
    def test_demand_outturn_daily_stream_get_error(self, mock_stream_get):
        """Test case for demand_outturn_daily_stream_get error handling"""

        mock_stream_get.side_effect = ApiException(status=500, reason="Internal Server Error")


        with self.assertRaises(ApiException) as context:
            list(self.api.demand_outturn_daily_stream_get())

        self.assertEqual(context.exception.status, 500)
        self.assertEqual(context.exception.reason, "Internal Server Error")

        self.api = DemandApi()

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_get')
    def test_demand_outturn_get(self, mock_demand_outturn_get):
        """Test case for demand_outturn_get

        Initial National Demand outturn (INDO)
        """

        mock_response = {
            'success': True,
            'data': [
                {
                    'publishTime': '2024-07-12T14:00:00Z',
                    'settlementDate': '2024-07-12',
                    'settlementPeriod': 28,
                    'initialDemandOutturn': 38000
                },
                {
                    'publishTime': '2024-07-12T14:30:00Z',
                    'settlementDate': '2024-07-12',
                    'settlementPeriod': 29,
                    'initialDemandOutturn': 37500
                }
            ]
        }
        mock_demand_outturn_get.return_value = mock_response

        response = self.api.demand_outturn_get()

        # Assert
        self.assertTrue(response['success'])
        self.assertEqual(len(response['data']), 2)
        self.assertEqual(response['data'][0]['initialDemandOutturn'], 38000)
        self.assertEqual(response['data'][1]['initialDemandOutturn'], 37500)

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_get')
    def test_demand_outturn_get_empty(self, mock_demand_outturn_get):
        """Test case for demand_outturn_get with empty response"""


        mock_response = {
            'success': True,
            'data': []
        }
        mock_demand_outturn_get.return_value = mock_response


        response = self.api.demand_outturn_get()

        # Assert
        self.assertTrue(response['success'])
        self.assertEqual(len(response['data']), 0)

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_get')
    def test_demand_outturn_get_error(self, mock_demand_outturn_get):
        """Test case for demand_outturn_get error handling"""

        mock_demand_outturn_get.side_effect = ApiException(status=404, reason="Not Found")

        with self.assertRaises(ApiException) as context:
            self.api.demand_outturn_get()

        self.assertEqual(context.exception.status, 404)
        self.assertEqual(context.exception.reason, "Not Found")

    @patch('elexonpy.api.demand_api.DemandApi.demand_outturn_get')
    def test_demand_outturn_get_with_parameters(self, mock_demand_outturn_get):
        """Test case for demand_outturn_get with specific parameters"""

        mock_response = {
            'success': True,
            'data': [
                {
                    'publishTime': '2024-07-12T14:00:00Z',
                    'settlementDate': '2024-07-12',
                    'settlementPeriod': 28,
                    'initialDemandOutturn': 38000
                }
            ]
        }
        mock_demand_outturn_get.return_value = mock_response


        response = self.api.demand_outturn_get(
            settlement_date='2024-07-12',
            settlement_period=28
        )


        self.assertTrue(response['success'])
        self.assertEqual(len(response['data']), 1)
        self.assertEqual(response['data'][0]['settlementDate'], '2024-07-12')
        self.assertEqual(response['data'][0]['settlementPeriod'], 28)

    # def test_demand_outturn_stream_get(self):
    #     """Test case for demand_outturn_stream_get

    #     Initial National Demand outturn (INDO) stream  # noqa: E501
    #     """
    #     pass

    # def test_demand_outturn_summary_get(self):
    #     """Test case for demand_outturn_summary_get

    #     System demand summary (FUELINST)  # noqa: E501
    #     """
    #     pass

    # def test_demand_peak_get(self):
    #     """Test case for demand_peak_get

    #     Peak demand per day (ITSDO)  # noqa: E501
    #     """
    #     pass

    # def test_demand_peak_indicative_get(self):
    #     """Test case for demand_peak_indicative_get

    #     Indicative peak demand per day (S0142, ITSDO, FUELHH)  # noqa: E501
    #     """
    #     pass

    # def test_demand_peak_indicative_operational_triad_season_get(self):
    #     """Test case for demand_peak_indicative_operational_triad_season_get

    #     Operational data demand peaks for a Triad season (ITSDO, FUELHH)  # noqa: E501
    #     """
    #     pass

    # def test_demand_peak_indicative_settlement_triad_season_get(self):
    #     """Test case for demand_peak_indicative_settlement_triad_season_get

    #     Settlement data demand peaks for a Triad season (S0142)  # noqa: E501
    #     """
    #     pass

    # def test_demand_peak_triad_get(self):
    #     """Test case for demand_peak_triad_get

    #     Triad demand peaks (S0142, ITSDO, FUELHH)  # noqa: E501
    #     """
    #     pass





if __name__ == '__main__':
    unittest.main()
