# coding: utf-8

"""
    Insights API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'fuel_type': 'str',
        'publish_time': 'datetime',
        'system_zone': 'str',
        'calendar_week_number': 'int',
        'year': 'int',
        'output_usable': 'int',
        'bidding_zone': 'str',
        'interconnector_name': 'str',
        'interconnector': 'bool'
    }

    attribute_map = {
        'dataset': 'dataset',
        'fuel_type': 'fuelType',
        'publish_time': 'publishTime',
        'system_zone': 'systemZone',
        'calendar_week_number': 'calendarWeekNumber',
        'year': 'year',
        'output_usable': 'outputUsable',
        'bidding_zone': 'biddingZone',
        'interconnector_name': 'interconnectorName',
        'interconnector': 'interconnector'
    }

    def __init__(self, dataset=None, fuel_type=None, publish_time=None, system_zone=None, calendar_week_number=None, year=None, output_usable=None, bidding_zone=None, interconnector_name=None, interconnector=None):  # noqa: E501
        """InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly - a model defined in Swagger"""  # noqa: E501
        self._dataset = None
        self._fuel_type = None
        self._publish_time = None
        self._system_zone = None
        self._calendar_week_number = None
        self._year = None
        self._output_usable = None
        self._bidding_zone = None
        self._interconnector_name = None
        self._interconnector = None
        self.discriminator = None
        if dataset is not None:
            self.dataset = dataset
        if fuel_type is not None:
            self.fuel_type = fuel_type
        if publish_time is not None:
            self.publish_time = publish_time
        if system_zone is not None:
            self.system_zone = system_zone
        if calendar_week_number is not None:
            self.calendar_week_number = calendar_week_number
        if year is not None:
            self.year = year
        if output_usable is not None:
            self.output_usable = output_usable
        if bidding_zone is not None:
            self.bidding_zone = bidding_zone
        if interconnector_name is not None:
            self.interconnector_name = interconnector_name
        if interconnector is not None:
            self.interconnector = interconnector

    @property
    def dataset(self):
        """Gets the dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param dataset: The dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def fuel_type(self):
        """Gets the fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param fuel_type: The fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: str
        """

        self._fuel_type = fuel_type

    @property
    def publish_time(self):
        """Gets the publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param publish_time: The publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: datetime
        """

        self._publish_time = publish_time

    @property
    def system_zone(self):
        """Gets the system_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The system_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: str
        """
        return self._system_zone

    @system_zone.setter
    def system_zone(self, system_zone):
        """Sets the system_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param system_zone: The system_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: str
        """

        self._system_zone = system_zone

    @property
    def calendar_week_number(self):
        """Gets the calendar_week_number of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The calendar_week_number of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: int
        """
        return self._calendar_week_number

    @calendar_week_number.setter
    def calendar_week_number(self, calendar_week_number):
        """Sets the calendar_week_number of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param calendar_week_number: The calendar_week_number of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: int
        """

        self._calendar_week_number = calendar_week_number

    @property
    def year(self):
        """Gets the year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param year: The year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def output_usable(self):
        """Gets the output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: int
        """
        return self._output_usable

    @output_usable.setter
    def output_usable(self, output_usable):
        """Sets the output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param output_usable: The output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: int
        """

        self._output_usable = output_usable

    @property
    def bidding_zone(self):
        """Gets the bidding_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The bidding_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: str
        """
        return self._bidding_zone

    @bidding_zone.setter
    def bidding_zone(self, bidding_zone):
        """Sets the bidding_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param bidding_zone: The bidding_zone of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: str
        """

        self._bidding_zone = bidding_zone

    @property
    def interconnector_name(self):
        """Gets the interconnector_name of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The interconnector_name of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: str
        """
        return self._interconnector_name

    @interconnector_name.setter
    def interconnector_name(self, interconnector_name):
        """Sets the interconnector_name of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param interconnector_name: The interconnector_name of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: str
        """

        self._interconnector_name = interconnector_name

    @property
    def interconnector(self):
        """Gets the interconnector of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501


        :return: The interconnector of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :rtype: bool
        """
        return self._interconnector

    @interconnector.setter
    def interconnector(self, interconnector):
        """Sets the interconnector of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.


        :param interconnector: The interconnector of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly.  # noqa: E501
        :type: bool
        """

        self._interconnector = interconnector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeWeekly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
