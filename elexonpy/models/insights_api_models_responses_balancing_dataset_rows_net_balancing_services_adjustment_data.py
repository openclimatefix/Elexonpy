# coding: utf-8

"""
    Insights API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'settlement_date': 'date',
        'settlement_period': 'int',
        'net_buy_price_cost_adjustment_energy': 'float',
        'net_buy_price_volume_adjustment_energy': 'float',
        'net_buy_price_volume_adjustment_system': 'float',
        'buy_price_price_adjustment': 'float',
        'net_sell_price_cost_adjustment_energy': 'float',
        'net_sell_price_volume_adjustment_energy': 'float',
        'net_sell_price_volume_adjustment_system': 'float',
        'sell_price_price_adjustment': 'float'
    }

    attribute_map = {
        'dataset': 'dataset',
        'settlement_date': 'settlementDate',
        'settlement_period': 'settlementPeriod',
        'net_buy_price_cost_adjustment_energy': 'netBuyPriceCostAdjustmentEnergy',
        'net_buy_price_volume_adjustment_energy': 'netBuyPriceVolumeAdjustmentEnergy',
        'net_buy_price_volume_adjustment_system': 'netBuyPriceVolumeAdjustmentSystem',
        'buy_price_price_adjustment': 'buyPricePriceAdjustment',
        'net_sell_price_cost_adjustment_energy': 'netSellPriceCostAdjustmentEnergy',
        'net_sell_price_volume_adjustment_energy': 'netSellPriceVolumeAdjustmentEnergy',
        'net_sell_price_volume_adjustment_system': 'netSellPriceVolumeAdjustmentSystem',
        'sell_price_price_adjustment': 'sellPricePriceAdjustment'
    }

    def __init__(self, dataset=None, settlement_date=None, settlement_period=None, net_buy_price_cost_adjustment_energy=None, net_buy_price_volume_adjustment_energy=None, net_buy_price_volume_adjustment_system=None, buy_price_price_adjustment=None, net_sell_price_cost_adjustment_energy=None, net_sell_price_volume_adjustment_energy=None, net_sell_price_volume_adjustment_system=None, sell_price_price_adjustment=None):  # noqa: E501
        """InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData - a model defined in Swagger"""  # noqa: E501
        self._dataset = None
        self._settlement_date = None
        self._settlement_period = None
        self._net_buy_price_cost_adjustment_energy = None
        self._net_buy_price_volume_adjustment_energy = None
        self._net_buy_price_volume_adjustment_system = None
        self._buy_price_price_adjustment = None
        self._net_sell_price_cost_adjustment_energy = None
        self._net_sell_price_volume_adjustment_energy = None
        self._net_sell_price_volume_adjustment_system = None
        self._sell_price_price_adjustment = None
        self.discriminator = None
        if dataset is not None:
            self.dataset = dataset
        if settlement_date is not None:
            self.settlement_date = settlement_date
        if settlement_period is not None:
            self.settlement_period = settlement_period
        if net_buy_price_cost_adjustment_energy is not None:
            self.net_buy_price_cost_adjustment_energy = net_buy_price_cost_adjustment_energy
        if net_buy_price_volume_adjustment_energy is not None:
            self.net_buy_price_volume_adjustment_energy = net_buy_price_volume_adjustment_energy
        if net_buy_price_volume_adjustment_system is not None:
            self.net_buy_price_volume_adjustment_system = net_buy_price_volume_adjustment_system
        if buy_price_price_adjustment is not None:
            self.buy_price_price_adjustment = buy_price_price_adjustment
        if net_sell_price_cost_adjustment_energy is not None:
            self.net_sell_price_cost_adjustment_energy = net_sell_price_cost_adjustment_energy
        if net_sell_price_volume_adjustment_energy is not None:
            self.net_sell_price_volume_adjustment_energy = net_sell_price_volume_adjustment_energy
        if net_sell_price_volume_adjustment_system is not None:
            self.net_sell_price_volume_adjustment_system = net_sell_price_volume_adjustment_system
        if sell_price_price_adjustment is not None:
            self.sell_price_price_adjustment = sell_price_price_adjustment

    @property
    def dataset(self):
        """Gets the dataset of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The dataset of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param dataset: The dataset of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def settlement_date(self):
        """Gets the settlement_date of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The settlement_date of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: date
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param settlement_date: The settlement_date of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: date
        """

        self._settlement_date = settlement_date

    @property
    def settlement_period(self):
        """Gets the settlement_period of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The settlement_period of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: int
        """
        return self._settlement_period

    @settlement_period.setter
    def settlement_period(self, settlement_period):
        """Sets the settlement_period of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param settlement_period: The settlement_period of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: int
        """

        self._settlement_period = settlement_period

    @property
    def net_buy_price_cost_adjustment_energy(self):
        """Gets the net_buy_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The net_buy_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._net_buy_price_cost_adjustment_energy

    @net_buy_price_cost_adjustment_energy.setter
    def net_buy_price_cost_adjustment_energy(self, net_buy_price_cost_adjustment_energy):
        """Sets the net_buy_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param net_buy_price_cost_adjustment_energy: The net_buy_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._net_buy_price_cost_adjustment_energy = net_buy_price_cost_adjustment_energy

    @property
    def net_buy_price_volume_adjustment_energy(self):
        """Gets the net_buy_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The net_buy_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._net_buy_price_volume_adjustment_energy

    @net_buy_price_volume_adjustment_energy.setter
    def net_buy_price_volume_adjustment_energy(self, net_buy_price_volume_adjustment_energy):
        """Sets the net_buy_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param net_buy_price_volume_adjustment_energy: The net_buy_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._net_buy_price_volume_adjustment_energy = net_buy_price_volume_adjustment_energy

    @property
    def net_buy_price_volume_adjustment_system(self):
        """Gets the net_buy_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The net_buy_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._net_buy_price_volume_adjustment_system

    @net_buy_price_volume_adjustment_system.setter
    def net_buy_price_volume_adjustment_system(self, net_buy_price_volume_adjustment_system):
        """Sets the net_buy_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param net_buy_price_volume_adjustment_system: The net_buy_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._net_buy_price_volume_adjustment_system = net_buy_price_volume_adjustment_system

    @property
    def buy_price_price_adjustment(self):
        """Gets the buy_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The buy_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._buy_price_price_adjustment

    @buy_price_price_adjustment.setter
    def buy_price_price_adjustment(self, buy_price_price_adjustment):
        """Sets the buy_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param buy_price_price_adjustment: The buy_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._buy_price_price_adjustment = buy_price_price_adjustment

    @property
    def net_sell_price_cost_adjustment_energy(self):
        """Gets the net_sell_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The net_sell_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._net_sell_price_cost_adjustment_energy

    @net_sell_price_cost_adjustment_energy.setter
    def net_sell_price_cost_adjustment_energy(self, net_sell_price_cost_adjustment_energy):
        """Sets the net_sell_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param net_sell_price_cost_adjustment_energy: The net_sell_price_cost_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._net_sell_price_cost_adjustment_energy = net_sell_price_cost_adjustment_energy

    @property
    def net_sell_price_volume_adjustment_energy(self):
        """Gets the net_sell_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The net_sell_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._net_sell_price_volume_adjustment_energy

    @net_sell_price_volume_adjustment_energy.setter
    def net_sell_price_volume_adjustment_energy(self, net_sell_price_volume_adjustment_energy):
        """Sets the net_sell_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param net_sell_price_volume_adjustment_energy: The net_sell_price_volume_adjustment_energy of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._net_sell_price_volume_adjustment_energy = net_sell_price_volume_adjustment_energy

    @property
    def net_sell_price_volume_adjustment_system(self):
        """Gets the net_sell_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The net_sell_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._net_sell_price_volume_adjustment_system

    @net_sell_price_volume_adjustment_system.setter
    def net_sell_price_volume_adjustment_system(self, net_sell_price_volume_adjustment_system):
        """Sets the net_sell_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param net_sell_price_volume_adjustment_system: The net_sell_price_volume_adjustment_system of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._net_sell_price_volume_adjustment_system = net_sell_price_volume_adjustment_system

    @property
    def sell_price_price_adjustment(self):
        """Gets the sell_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501


        :return: The sell_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_price_adjustment

    @sell_price_price_adjustment.setter
    def sell_price_price_adjustment(self, sell_price_price_adjustment):
        """Sets the sell_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.


        :param sell_price_price_adjustment: The sell_price_price_adjustment of this InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.  # noqa: E501
        :type: float
        """

        self._sell_price_price_adjustment = sell_price_price_adjustment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
