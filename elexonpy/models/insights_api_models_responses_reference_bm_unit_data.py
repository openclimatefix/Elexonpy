# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesReferenceBmUnitData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'national_grid_bm_unit': 'str',
        'elexon_bm_unit': 'str',
        'eic': 'str',
        'fuel_type': 'str',
        'lead_party_name': 'str',
        'bm_unit_type': 'str',
        'fpn_flag': 'bool'
    }

    attribute_map = {
        'national_grid_bm_unit': 'nationalGridBmUnit',
        'elexon_bm_unit': 'elexonBmUnit',
        'eic': 'eic',
        'fuel_type': 'fuelType',
        'lead_party_name': 'leadPartyName',
        'bm_unit_type': 'bmUnitType',
        'fpn_flag': 'fpnFlag'
    }

    def __init__(self, national_grid_bm_unit=None, elexon_bm_unit=None, eic=None, fuel_type=None, lead_party_name=None, bm_unit_type=None, fpn_flag=None):  # noqa: E501
        """InsightsApiModelsResponsesReferenceBmUnitData - a model defined in Swagger"""  # noqa: E501
        self._national_grid_bm_unit = None
        self._elexon_bm_unit = None
        self._eic = None
        self._fuel_type = None
        self._lead_party_name = None
        self._bm_unit_type = None
        self._fpn_flag = None
        self.discriminator = None
        if national_grid_bm_unit is not None:
            self.national_grid_bm_unit = national_grid_bm_unit
        if elexon_bm_unit is not None:
            self.elexon_bm_unit = elexon_bm_unit
        if eic is not None:
            self.eic = eic
        if fuel_type is not None:
            self.fuel_type = fuel_type
        if lead_party_name is not None:
            self.lead_party_name = lead_party_name
        if bm_unit_type is not None:
            self.bm_unit_type = bm_unit_type
        if fpn_flag is not None:
            self.fpn_flag = fpn_flag

    @property
    def national_grid_bm_unit(self):
        """Gets the national_grid_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The national_grid_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: str
        """
        return self._national_grid_bm_unit

    @national_grid_bm_unit.setter
    def national_grid_bm_unit(self, national_grid_bm_unit):
        """Sets the national_grid_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param national_grid_bm_unit: The national_grid_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: str
        """

        self._national_grid_bm_unit = national_grid_bm_unit

    @property
    def elexon_bm_unit(self):
        """Gets the elexon_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The elexon_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: str
        """
        return self._elexon_bm_unit

    @elexon_bm_unit.setter
    def elexon_bm_unit(self, elexon_bm_unit):
        """Sets the elexon_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param elexon_bm_unit: The elexon_bm_unit of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: str
        """

        self._elexon_bm_unit = elexon_bm_unit

    @property
    def eic(self):
        """Gets the eic of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The eic of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: str
        """
        return self._eic

    @eic.setter
    def eic(self, eic):
        """Sets the eic of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param eic: The eic of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: str
        """

        self._eic = eic

    @property
    def fuel_type(self):
        """Gets the fuel_type of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The fuel_type of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param fuel_type: The fuel_type of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: str
        """

        self._fuel_type = fuel_type

    @property
    def lead_party_name(self):
        """Gets the lead_party_name of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The lead_party_name of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: str
        """
        return self._lead_party_name

    @lead_party_name.setter
    def lead_party_name(self, lead_party_name):
        """Sets the lead_party_name of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param lead_party_name: The lead_party_name of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: str
        """

        self._lead_party_name = lead_party_name

    @property
    def bm_unit_type(self):
        """Gets the bm_unit_type of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The bm_unit_type of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: str
        """
        return self._bm_unit_type

    @bm_unit_type.setter
    def bm_unit_type(self, bm_unit_type):
        """Sets the bm_unit_type of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param bm_unit_type: The bm_unit_type of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: str
        """

        self._bm_unit_type = bm_unit_type

    @property
    def fpn_flag(self):
        """Gets the fpn_flag of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501


        :return: The fpn_flag of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :rtype: bool
        """
        return self._fpn_flag

    @fpn_flag.setter
    def fpn_flag(self, fpn_flag):
        """Sets the fpn_flag of this InsightsApiModelsResponsesReferenceBmUnitData.


        :param fpn_flag: The fpn_flag of this InsightsApiModelsResponsesReferenceBmUnitData.  # noqa: E501
        :type: bool
        """

        self._fpn_flag = fpn_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesReferenceBmUnitData, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesReferenceBmUnitData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
