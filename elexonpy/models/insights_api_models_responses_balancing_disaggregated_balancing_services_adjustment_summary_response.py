# coding: utf-8

"""
    Insights API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'settlement_date': 'date',
        'settlement_period': 'int',
        'start_time': 'datetime',
        'buy_action_count': 'int',
        'sell_action_count': 'int',
        'buy_price_minimum': 'float',
        'buy_price_maximum': 'float',
        'buy_price_average': 'float',
        'sell_price_minimum': 'float',
        'sell_price_maximum': 'float',
        'sell_price_average': 'float',
        'buy_volume_total': 'float',
        'sell_volume_total': 'float',
        'net_volume': 'float'
    }

    attribute_map = {
        'settlement_date': 'settlementDate',
        'settlement_period': 'settlementPeriod',
        'start_time': 'startTime',
        'buy_action_count': 'buyActionCount',
        'sell_action_count': 'sellActionCount',
        'buy_price_minimum': 'buyPriceMinimum',
        'buy_price_maximum': 'buyPriceMaximum',
        'buy_price_average': 'buyPriceAverage',
        'sell_price_minimum': 'sellPriceMinimum',
        'sell_price_maximum': 'sellPriceMaximum',
        'sell_price_average': 'sellPriceAverage',
        'buy_volume_total': 'buyVolumeTotal',
        'sell_volume_total': 'sellVolumeTotal',
        'net_volume': 'netVolume'
    }

    def __init__(self, settlement_date=None, settlement_period=None, start_time=None, buy_action_count=None, sell_action_count=None, buy_price_minimum=None, buy_price_maximum=None, buy_price_average=None, sell_price_minimum=None, sell_price_maximum=None, sell_price_average=None, buy_volume_total=None, sell_volume_total=None, net_volume=None):  # noqa: E501
        """InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._settlement_date = None
        self._settlement_period = None
        self._start_time = None
        self._buy_action_count = None
        self._sell_action_count = None
        self._buy_price_minimum = None
        self._buy_price_maximum = None
        self._buy_price_average = None
        self._sell_price_minimum = None
        self._sell_price_maximum = None
        self._sell_price_average = None
        self._buy_volume_total = None
        self._sell_volume_total = None
        self._net_volume = None
        self.discriminator = None
        if settlement_date is not None:
            self.settlement_date = settlement_date
        if settlement_period is not None:
            self.settlement_period = settlement_period
        if start_time is not None:
            self.start_time = start_time
        if buy_action_count is not None:
            self.buy_action_count = buy_action_count
        if sell_action_count is not None:
            self.sell_action_count = sell_action_count
        if buy_price_minimum is not None:
            self.buy_price_minimum = buy_price_minimum
        if buy_price_maximum is not None:
            self.buy_price_maximum = buy_price_maximum
        if buy_price_average is not None:
            self.buy_price_average = buy_price_average
        if sell_price_minimum is not None:
            self.sell_price_minimum = sell_price_minimum
        if sell_price_maximum is not None:
            self.sell_price_maximum = sell_price_maximum
        if sell_price_average is not None:
            self.sell_price_average = sell_price_average
        if buy_volume_total is not None:
            self.buy_volume_total = buy_volume_total
        if sell_volume_total is not None:
            self.sell_volume_total = sell_volume_total
        if net_volume is not None:
            self.net_volume = net_volume

    @property
    def settlement_date(self):
        """Gets the settlement_date of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The settlement_date of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: date
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param settlement_date: The settlement_date of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: date
        """

        self._settlement_date = settlement_date

    @property
    def settlement_period(self):
        """Gets the settlement_period of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The settlement_period of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._settlement_period

    @settlement_period.setter
    def settlement_period(self, settlement_period):
        """Sets the settlement_period of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param settlement_period: The settlement_period of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: int
        """

        self._settlement_period = settlement_period

    @property
    def start_time(self):
        """Gets the start_time of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The start_time of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param start_time: The start_time of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def buy_action_count(self):
        """Gets the buy_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The buy_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._buy_action_count

    @buy_action_count.setter
    def buy_action_count(self, buy_action_count):
        """Sets the buy_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param buy_action_count: The buy_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: int
        """

        self._buy_action_count = buy_action_count

    @property
    def sell_action_count(self):
        """Gets the sell_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The sell_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._sell_action_count

    @sell_action_count.setter
    def sell_action_count(self, sell_action_count):
        """Sets the sell_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param sell_action_count: The sell_action_count of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: int
        """

        self._sell_action_count = sell_action_count

    @property
    def buy_price_minimum(self):
        """Gets the buy_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The buy_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._buy_price_minimum

    @buy_price_minimum.setter
    def buy_price_minimum(self, buy_price_minimum):
        """Sets the buy_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param buy_price_minimum: The buy_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._buy_price_minimum = buy_price_minimum

    @property
    def buy_price_maximum(self):
        """Gets the buy_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The buy_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._buy_price_maximum

    @buy_price_maximum.setter
    def buy_price_maximum(self, buy_price_maximum):
        """Sets the buy_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param buy_price_maximum: The buy_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._buy_price_maximum = buy_price_maximum

    @property
    def buy_price_average(self):
        """Gets the buy_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The buy_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._buy_price_average

    @buy_price_average.setter
    def buy_price_average(self, buy_price_average):
        """Sets the buy_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param buy_price_average: The buy_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._buy_price_average = buy_price_average

    @property
    def sell_price_minimum(self):
        """Gets the sell_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The sell_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_minimum

    @sell_price_minimum.setter
    def sell_price_minimum(self, sell_price_minimum):
        """Sets the sell_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param sell_price_minimum: The sell_price_minimum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._sell_price_minimum = sell_price_minimum

    @property
    def sell_price_maximum(self):
        """Gets the sell_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The sell_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_maximum

    @sell_price_maximum.setter
    def sell_price_maximum(self, sell_price_maximum):
        """Sets the sell_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param sell_price_maximum: The sell_price_maximum of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._sell_price_maximum = sell_price_maximum

    @property
    def sell_price_average(self):
        """Gets the sell_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The sell_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_average

    @sell_price_average.setter
    def sell_price_average(self, sell_price_average):
        """Sets the sell_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param sell_price_average: The sell_price_average of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._sell_price_average = sell_price_average

    @property
    def buy_volume_total(self):
        """Gets the buy_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The buy_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._buy_volume_total

    @buy_volume_total.setter
    def buy_volume_total(self, buy_volume_total):
        """Sets the buy_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param buy_volume_total: The buy_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._buy_volume_total = buy_volume_total

    @property
    def sell_volume_total(self):
        """Gets the sell_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The sell_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._sell_volume_total

    @sell_volume_total.setter
    def sell_volume_total(self, sell_volume_total):
        """Sets the sell_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param sell_volume_total: The sell_volume_total of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._sell_volume_total = sell_volume_total

    @property
    def net_volume(self):
        """Gets the net_volume of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501


        :return: The net_volume of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._net_volume

    @net_volume.setter
    def net_volume(self, net_volume):
        """Sets the net_volume of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.


        :param net_volume: The net_volume of this InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.  # noqa: E501
        :type: float
        """

        self._net_volume = net_volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
