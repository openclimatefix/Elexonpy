# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'fuel_type': 'str',
        'national_grid_bm_unit': 'str',
        'bm_unit': 'str',
        'publish_time': 'datetime',
        'week': 'int',
        'year': 'int',
        'output_usable': 'int'
    }

    attribute_map = {
        'dataset': 'dataset',
        'fuel_type': 'fuelType',
        'national_grid_bm_unit': 'nationalGridBmUnit',
        'bm_unit': 'bmUnit',
        'publish_time': 'publishTime',
        'week': 'week',
        'year': 'year',
        'output_usable': 'outputUsable'
    }

    def __init__(self, dataset=None, fuel_type=None, national_grid_bm_unit=None, bm_unit=None, publish_time=None, week=None, year=None, output_usable=None):  # noqa: E501
        """InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly - a model defined in Swagger"""  # noqa: E501
        self._dataset = None
        self._fuel_type = None
        self._national_grid_bm_unit = None
        self._bm_unit = None
        self._publish_time = None
        self._week = None
        self._year = None
        self._output_usable = None
        self.discriminator = None
        if dataset is not None:
            self.dataset = dataset
        if fuel_type is not None:
            self.fuel_type = fuel_type
        if national_grid_bm_unit is not None:
            self.national_grid_bm_unit = national_grid_bm_unit
        if bm_unit is not None:
            self.bm_unit = bm_unit
        if publish_time is not None:
            self.publish_time = publish_time
        if week is not None:
            self.week = week
        if year is not None:
            self.year = year
        if output_usable is not None:
            self.output_usable = output_usable

    @property
    def dataset(self):
        """Gets the dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param dataset: The dataset of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def fuel_type(self):
        """Gets the fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param fuel_type: The fuel_type of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: str
        """

        self._fuel_type = fuel_type

    @property
    def national_grid_bm_unit(self):
        """Gets the national_grid_bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The national_grid_bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: str
        """
        return self._national_grid_bm_unit

    @national_grid_bm_unit.setter
    def national_grid_bm_unit(self, national_grid_bm_unit):
        """Sets the national_grid_bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param national_grid_bm_unit: The national_grid_bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: str
        """

        self._national_grid_bm_unit = national_grid_bm_unit

    @property
    def bm_unit(self):
        """Gets the bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: str
        """
        return self._bm_unit

    @bm_unit.setter
    def bm_unit(self, bm_unit):
        """Sets the bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param bm_unit: The bm_unit of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: str
        """

        self._bm_unit = bm_unit

    @property
    def publish_time(self):
        """Gets the publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param publish_time: The publish_time of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: datetime
        """

        self._publish_time = publish_time

    @property
    def week(self):
        """Gets the week of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The week of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param week: The week of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: int
        """

        self._week = week

    @property
    def year(self):
        """Gets the year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param year: The year of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def output_usable(self):
        """Gets the output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501


        :return: The output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :rtype: int
        """
        return self._output_usable

    @output_usable.setter
    def output_usable(self, output_usable):
        """Sets the output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.


        :param output_usable: The output_usable of this InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly.  # noqa: E501
        :type: int
        """

        self._output_usable = output_usable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByBmUnitWeekly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
