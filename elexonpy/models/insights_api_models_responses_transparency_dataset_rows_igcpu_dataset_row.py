# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'document_id': 'str',
        'publish_time': 'datetime',
        'effective_from': 'date',
        'psr_type': 'str',
        'registered_resource_eic_code': 'str',
        'registered_resource_name': 'str',
        'bm_unit': 'str',
        'voltage_limit': 'float',
        'installed_capacity': 'float'
    }

    attribute_map = {
        'dataset': 'dataset',
        'document_id': 'documentId',
        'publish_time': 'publishTime',
        'effective_from': 'effectiveFrom',
        'psr_type': 'psrType',
        'registered_resource_eic_code': 'registeredResourceEicCode',
        'registered_resource_name': 'registeredResourceName',
        'bm_unit': 'bmUnit',
        'voltage_limit': 'voltageLimit',
        'installed_capacity': 'installedCapacity'
    }

    def __init__(self, dataset=None, document_id=None, publish_time=None, effective_from=None, psr_type=None, registered_resource_eic_code=None, registered_resource_name=None, bm_unit=None, voltage_limit=None, installed_capacity=None):  # noqa: E501
        """InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow - a model defined in Swagger"""  # noqa: E501
        self._dataset = None
        self._document_id = None
        self._publish_time = None
        self._effective_from = None
        self._psr_type = None
        self._registered_resource_eic_code = None
        self._registered_resource_name = None
        self._bm_unit = None
        self._voltage_limit = None
        self._installed_capacity = None
        self.discriminator = None
        if dataset is not None:
            self.dataset = dataset
        if document_id is not None:
            self.document_id = document_id
        if publish_time is not None:
            self.publish_time = publish_time
        if effective_from is not None:
            self.effective_from = effective_from
        if psr_type is not None:
            self.psr_type = psr_type
        if registered_resource_eic_code is not None:
            self.registered_resource_eic_code = registered_resource_eic_code
        if registered_resource_name is not None:
            self.registered_resource_name = registered_resource_name
        if bm_unit is not None:
            self.bm_unit = bm_unit
        if voltage_limit is not None:
            self.voltage_limit = voltage_limit
        if installed_capacity is not None:
            self.installed_capacity = installed_capacity

    @property
    def dataset(self):
        """Gets the dataset of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The dataset of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param dataset: The dataset of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def document_id(self):
        """Gets the document_id of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The document_id of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param document_id: The document_id of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def publish_time(self):
        """Gets the publish_time of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The publish_time of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param publish_time: The publish_time of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: datetime
        """

        self._publish_time = publish_time

    @property
    def effective_from(self):
        """Gets the effective_from of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The effective_from of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: date
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from):
        """Sets the effective_from of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param effective_from: The effective_from of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: date
        """

        self._effective_from = effective_from

    @property
    def psr_type(self):
        """Gets the psr_type of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The psr_type of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: str
        """
        return self._psr_type

    @psr_type.setter
    def psr_type(self, psr_type):
        """Sets the psr_type of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param psr_type: The psr_type of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: str
        """

        self._psr_type = psr_type

    @property
    def registered_resource_eic_code(self):
        """Gets the registered_resource_eic_code of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The registered_resource_eic_code of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: str
        """
        return self._registered_resource_eic_code

    @registered_resource_eic_code.setter
    def registered_resource_eic_code(self, registered_resource_eic_code):
        """Sets the registered_resource_eic_code of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param registered_resource_eic_code: The registered_resource_eic_code of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: str
        """

        self._registered_resource_eic_code = registered_resource_eic_code

    @property
    def registered_resource_name(self):
        """Gets the registered_resource_name of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The registered_resource_name of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: str
        """
        return self._registered_resource_name

    @registered_resource_name.setter
    def registered_resource_name(self, registered_resource_name):
        """Sets the registered_resource_name of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param registered_resource_name: The registered_resource_name of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: str
        """

        self._registered_resource_name = registered_resource_name

    @property
    def bm_unit(self):
        """Gets the bm_unit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The bm_unit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: str
        """
        return self._bm_unit

    @bm_unit.setter
    def bm_unit(self, bm_unit):
        """Sets the bm_unit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param bm_unit: The bm_unit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: str
        """

        self._bm_unit = bm_unit

    @property
    def voltage_limit(self):
        """Gets the voltage_limit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The voltage_limit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: float
        """
        return self._voltage_limit

    @voltage_limit.setter
    def voltage_limit(self, voltage_limit):
        """Sets the voltage_limit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param voltage_limit: The voltage_limit of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: float
        """

        self._voltage_limit = voltage_limit

    @property
    def installed_capacity(self):
        """Gets the installed_capacity of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501


        :return: The installed_capacity of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :rtype: float
        """
        return self._installed_capacity

    @installed_capacity.setter
    def installed_capacity(self, installed_capacity):
        """Sets the installed_capacity of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.


        :param installed_capacity: The installed_capacity of this InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow.  # noqa: E501
        :type: float
        """

        self._installed_capacity = installed_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesTransparencyDatasetRowsIgcpuDatasetRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
