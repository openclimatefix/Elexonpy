# coding: utf-8

"""
    Insights API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date_time': 'datetime',
        'settlement_date': 'date',
        'settlement_period': 'int',
        'start_time': 'datetime',
        'bm_unit': 'str',
        'bm_unit_type': 'str',
        'lead_party_name': 'str',
        'national_grid_bm_unit': 'str',
        'acceptance_id': 'int',
        'acceptance_duration': 'str',
        'total_volume_accepted': 'float',
        'pair_volumes': 'InsightsApiModelsResponsesBalancingSettlementDerivedDataBidOfferPairs'
    }

    attribute_map = {
        'created_date_time': 'createdDateTime',
        'settlement_date': 'settlementDate',
        'settlement_period': 'settlementPeriod',
        'start_time': 'startTime',
        'bm_unit': 'bmUnit',
        'bm_unit_type': 'bmUnitType',
        'lead_party_name': 'leadPartyName',
        'national_grid_bm_unit': 'nationalGridBmUnit',
        'acceptance_id': 'acceptanceId',
        'acceptance_duration': 'acceptanceDuration',
        'total_volume_accepted': 'totalVolumeAccepted',
        'pair_volumes': 'pairVolumes'
    }

    def __init__(self, created_date_time=None, settlement_date=None, settlement_period=None, start_time=None, bm_unit=None, bm_unit_type=None, lead_party_name=None, national_grid_bm_unit=None, acceptance_id=None, acceptance_duration=None, total_volume_accepted=None, pair_volumes=None):  # noqa: E501
        """InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse - a model defined in Swagger"""  # noqa: E501
        self._created_date_time = None
        self._settlement_date = None
        self._settlement_period = None
        self._start_time = None
        self._bm_unit = None
        self._bm_unit_type = None
        self._lead_party_name = None
        self._national_grid_bm_unit = None
        self._acceptance_id = None
        self._acceptance_duration = None
        self._total_volume_accepted = None
        self._pair_volumes = None
        self.discriminator = None
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if settlement_date is not None:
            self.settlement_date = settlement_date
        if settlement_period is not None:
            self.settlement_period = settlement_period
        if start_time is not None:
            self.start_time = start_time
        if bm_unit is not None:
            self.bm_unit = bm_unit
        if bm_unit_type is not None:
            self.bm_unit_type = bm_unit_type
        if lead_party_name is not None:
            self.lead_party_name = lead_party_name
        if national_grid_bm_unit is not None:
            self.national_grid_bm_unit = national_grid_bm_unit
        if acceptance_id is not None:
            self.acceptance_id = acceptance_id
        if acceptance_duration is not None:
            self.acceptance_duration = acceptance_duration
        if total_volume_accepted is not None:
            self.total_volume_accepted = total_volume_accepted
        if pair_volumes is not None:
            self.pair_volumes = pair_volumes

    @property
    def created_date_time(self):
        """Gets the created_date_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The created_date_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param created_date_time: The created_date_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def settlement_date(self):
        """Gets the settlement_date of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The settlement_date of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: date
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param settlement_date: The settlement_date of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: date
        """

        self._settlement_date = settlement_date

    @property
    def settlement_period(self):
        """Gets the settlement_period of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The settlement_period of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: int
        """
        return self._settlement_period

    @settlement_period.setter
    def settlement_period(self, settlement_period):
        """Sets the settlement_period of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param settlement_period: The settlement_period of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: int
        """

        self._settlement_period = settlement_period

    @property
    def start_time(self):
        """Gets the start_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The start_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param start_time: The start_time of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def bm_unit(self):
        """Gets the bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: str
        """
        return self._bm_unit

    @bm_unit.setter
    def bm_unit(self, bm_unit):
        """Sets the bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param bm_unit: The bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: str
        """

        self._bm_unit = bm_unit

    @property
    def bm_unit_type(self):
        """Gets the bm_unit_type of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The bm_unit_type of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: str
        """
        return self._bm_unit_type

    @bm_unit_type.setter
    def bm_unit_type(self, bm_unit_type):
        """Sets the bm_unit_type of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param bm_unit_type: The bm_unit_type of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: str
        """

        self._bm_unit_type = bm_unit_type

    @property
    def lead_party_name(self):
        """Gets the lead_party_name of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The lead_party_name of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: str
        """
        return self._lead_party_name

    @lead_party_name.setter
    def lead_party_name(self, lead_party_name):
        """Sets the lead_party_name of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param lead_party_name: The lead_party_name of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: str
        """

        self._lead_party_name = lead_party_name

    @property
    def national_grid_bm_unit(self):
        """Gets the national_grid_bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The national_grid_bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: str
        """
        return self._national_grid_bm_unit

    @national_grid_bm_unit.setter
    def national_grid_bm_unit(self, national_grid_bm_unit):
        """Sets the national_grid_bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param national_grid_bm_unit: The national_grid_bm_unit of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: str
        """

        self._national_grid_bm_unit = national_grid_bm_unit

    @property
    def acceptance_id(self):
        """Gets the acceptance_id of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The acceptance_id of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: int
        """
        return self._acceptance_id

    @acceptance_id.setter
    def acceptance_id(self, acceptance_id):
        """Sets the acceptance_id of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param acceptance_id: The acceptance_id of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: int
        """

        self._acceptance_id = acceptance_id

    @property
    def acceptance_duration(self):
        """Gets the acceptance_duration of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The acceptance_duration of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: str
        """
        return self._acceptance_duration

    @acceptance_duration.setter
    def acceptance_duration(self, acceptance_duration):
        """Sets the acceptance_duration of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param acceptance_duration: The acceptance_duration of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: str
        """

        self._acceptance_duration = acceptance_duration

    @property
    def total_volume_accepted(self):
        """Gets the total_volume_accepted of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The total_volume_accepted of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_volume_accepted

    @total_volume_accepted.setter
    def total_volume_accepted(self, total_volume_accepted):
        """Sets the total_volume_accepted of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param total_volume_accepted: The total_volume_accepted of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: float
        """

        self._total_volume_accepted = total_volume_accepted

    @property
    def pair_volumes(self):
        """Gets the pair_volumes of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501


        :return: The pair_volumes of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :rtype: InsightsApiModelsResponsesBalancingSettlementDerivedDataBidOfferPairs
        """
        return self._pair_volumes

    @pair_volumes.setter
    def pair_volumes(self, pair_volumes):
        """Sets the pair_volumes of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.


        :param pair_volumes: The pair_volumes of this InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse.  # noqa: E501
        :type: InsightsApiModelsResponsesBalancingSettlementDerivedDataBidOfferPairs
        """

        self._pair_volumes = pair_volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightsApiModelsResponsesBalancingSettlementAcceptanceVolumeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
