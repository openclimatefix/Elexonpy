# coding: utf-8

"""
    Insights API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""



import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elexonpy.api_client import ApiClient


class DemandForecastApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_forecast_demand_daily(self, **kwargs):  # noqa: E501
        """Fourteen day demand forecast (NDFD, TSDFD)  # noqa: E501

        Retrieve latest 14-day forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_daily(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_daily_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_daily_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forecast_demand_daily_with_http_info(self, **kwargs):  # noqa: E501
        """Fourteen day demand forecast (NDFD, TSDFD)  # noqa: E501

        Retrieve latest 14-day forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_daily_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_daily" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/daily', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_daily_evolution_forecastdate_forecastdate(self, forecast_date, **kwargs):  # noqa: E501
        """Evolution of the fourteen-day demand forecast over time (NDFD, TSDFD)  # noqa: E501

        This endpoint provides the evolution of all daily demand forecasts over time for a given forecast date.                Date parameter must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_daily_evolution_forecastdate_forecastdate(forecast_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date forecast_date: Format - date (as full-date in RFC3339). The forecast date for the filter. This must be in the format yyyy-MM-dd. (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_daily_evolution_forecastdate_forecastdate_with_http_info(forecast_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_daily_evolution_forecastdate_forecastdate_with_http_info(forecast_date, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_daily_evolution_forecastdate_forecastdate_with_http_info(self, forecast_date, **kwargs):  # noqa: E501
        """Evolution of the fourteen-day demand forecast over time (NDFD, TSDFD)  # noqa: E501

        This endpoint provides the evolution of all daily demand forecasts over time for a given forecast date.                Date parameter must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_daily_evolution_forecastdate_forecastdate_with_http_info(forecast_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date forecast_date: Format - date (as full-date in RFC3339). The forecast date for the filter. This must be in the format yyyy-MM-dd. (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forecast_date', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_daily_evolution_forecastdate_forecastdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forecast_date' is set
        if ('forecast_date' not in params or
                params['forecast_date'] is None):
            raise ValueError("Missing the required parameter `forecast_date` when calling `get_forecast_demand_daily_evolution_forecastdate_forecastdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'forecast_date' in params:
            query_params.append(('forecastDate', params['forecast_date']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/daily/evolution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_daily_history_publishtime_publishtime(self, publish_time, **kwargs):  # noqa: E501
        """History of the fourteen-day demand forecast (NDFD, TSDFD)  # noqa: E501

        Retrieve historical daily forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_daily_history_publishtime_publishtime(publish_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime publish_time: Format - date-time (as date-time in RFC3339). (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_daily_history_publishtime_publishtime_with_http_info(publish_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_daily_history_publishtime_publishtime_with_http_info(publish_time, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_daily_history_publishtime_publishtime_with_http_info(self, publish_time, **kwargs):  # noqa: E501
        """History of the fourteen-day demand forecast (NDFD, TSDFD)  # noqa: E501

        Retrieve historical daily forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_daily_history_publishtime_publishtime_with_http_info(publish_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime publish_time: Format - date-time (as date-time in RFC3339). (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['publish_time', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_daily_history_publishtime_publishtime" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'publish_time' is set
        if ('publish_time' not in params or
                params['publish_time'] is None):
            raise ValueError("Missing the required parameter `publish_time` when calling `get_forecast_demand_daily_history_publishtime_publishtime`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'publish_time' in params:
            query_params.append(('publishTime', params['publish_time']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/daily/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDaily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead(self, **kwargs):  # noqa: E501
        """Day-ahead demand forecast (NDF, TSDF)  # noqa: E501

        This endpoint provides the day and day ahead demand forecast and are categorized as National Demand Forecast (NDF) and Transmission System Demand Forecast (TSDF);  the forecast values are derived by NGESO and is based on historically metered generation output for Great Britain.  The data is updated every 30 minutes and within 15 minutes of the end of the effective Settlement Period.  NDF takes into account transmission losses but but does not include station transformer load, pumped storage demand or Interconnector demand;  the data is reported only at national level; and TSDF which takes into account transmission losses , station transformer load, pumped storage demand and interconnector demand.  The data is reported both at national and boundary (system zones) level. Boundary data only available for Transmission System Demand Forecast (TSDF).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_with_http_info(self, **kwargs):  # noqa: E501
        """Day-ahead demand forecast (NDF, TSDF)  # noqa: E501

        This endpoint provides the day and day ahead demand forecast and are categorized as National Demand Forecast (NDF) and Transmission System Demand Forecast (TSDF);  the forecast values are derived by NGESO and is based on historically metered generation output for Great Britain.  The data is updated every 30 minutes and within 15 minutes of the end of the effective Settlement Period.  NDF takes into account transmission losses but but does not include station transformer load, pumped storage demand or Interconnector demand;  the data is reported only at national level; and TSDF which takes into account transmission losses , station transformer load, pumped storage demand and interconnector demand.  The data is reported both at national and boundary (system zones) level. Boundary data only available for Transmission System Demand Forecast (TSDF).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['boundary', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_earliest_from_from_to_to(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the earliest forecasted demand (NDF, TSDF)  # noqa: E501

        This endpoint allows for retrieving earliest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the earliest published forecast for each settlement period is shown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_earliest_from_from_to_to(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_earliest_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_earliest_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_earliest_from_from_to_to_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the earliest forecasted demand (NDF, TSDF)  # noqa: E501

        This endpoint allows for retrieving earliest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the earliest published forecast for each settlement period is shown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_earliest_from_from_to_to_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'boundary', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_earliest_from_from_to_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_forecast_demand_day_ahead_earliest_from_from_to_to`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_forecast_demand_day_ahead_earliest_from_from_to_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/earliest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_earliest_stream_from_from_to_to(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the earliest forecasted demand (NDF, TSDF) stream  # noqa: E501

        This endpoint allows for retrieving a stream of earliest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the earliest published forecast for each settlement period is shown.  This endpoint has an optimised JSON payload and aimed at frequent request for the day-ahead demand forecast data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_earliest_stream_from_from_to_to(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :return: list[InsightsApiModelsServiceDayAheadDemandForecastRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_earliest_stream_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_earliest_stream_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_earliest_stream_from_from_to_to_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the earliest forecasted demand (NDF, TSDF) stream  # noqa: E501

        This endpoint allows for retrieving a stream of earliest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the earliest published forecast for each settlement period is shown.  This endpoint has an optimised JSON payload and aimed at frequent request for the day-ahead demand forecast data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_earliest_stream_from_from_to_to_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :return: list[InsightsApiModelsServiceDayAheadDemandForecastRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'boundary']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_earliest_stream_from_from_to_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_forecast_demand_day_ahead_earliest_stream_from_from_to_to`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_forecast_demand_day_ahead_earliest_stream_from_from_to_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/earliest/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InsightsApiModelsServiceDayAheadDemandForecastRow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle(self, settlement_date, settlement_period, **kwargs):  # noqa: E501
        """Evolution of the day-ahead demand forecast over time (NDF, TSDF)  # noqa: E501

        This endpoint provides the day and day ahead demand forecast and are categorized as National Demand Forecast (NDF) and Transmission System Demand Forecast (TSDF);  the forecast values are derived by NGESO and is based on historically metered generation output for Great Britain.  The data is updated every 30 minutes and within 15 minutes of the end of the effective Settlement Period.  NDF takes into account transmission losses but but does not include station transformer load, pumped storage demand or Interconnector demand;  the data is reported only at national level; and TSDF which takes into account transmission losses , station transformer load, pumped storage demand and interconnector demand.  The data is reported both at national and boundary (system zones) level. Boundary data only available for Transmission System Demand Forecast (TSDF).                Date parameter must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle(settlement_date, settlement_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date settlement_date: Format - date (as full-date in RFC3339). The settlement date for the filter. This must be in the format yyyy-MM-dd. (required)
        :param list[int] settlement_period: (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle_with_http_info(settlement_date, settlement_period, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle_with_http_info(settlement_date, settlement_period, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle_with_http_info(self, settlement_date, settlement_period, **kwargs):  # noqa: E501
        """Evolution of the day-ahead demand forecast over time (NDF, TSDF)  # noqa: E501

        This endpoint provides the day and day ahead demand forecast and are categorized as National Demand Forecast (NDF) and Transmission System Demand Forecast (TSDF);  the forecast values are derived by NGESO and is based on historically metered generation output for Great Britain.  The data is updated every 30 minutes and within 15 minutes of the end of the effective Settlement Period.  NDF takes into account transmission losses but but does not include station transformer load, pumped storage demand or Interconnector demand;  the data is reported only at national level; and TSDF which takes into account transmission losses , station transformer load, pumped storage demand and interconnector demand.  The data is reported both at national and boundary (system zones) level. Boundary data only available for Transmission System Demand Forecast (TSDF).                Date parameter must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle_with_http_info(settlement_date, settlement_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date settlement_date: Format - date (as full-date in RFC3339). The settlement date for the filter. This must be in the format yyyy-MM-dd. (required)
        :param list[int] settlement_period: (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settlement_date', 'settlement_period', 'boundary', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'settlement_date' is set
        if ('settlement_date' not in params or
                params['settlement_date'] is None):
            raise ValueError("Missing the required parameter `settlement_date` when calling `get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle`")  # noqa: E501
        # verify the required parameter 'settlement_period' is set
        if ('settlement_period' not in params or
                params['settlement_period'] is None):
            raise ValueError("Missing the required parameter `settlement_period` when calling `get_forecast_demand_day_ahead_evolution_settlementdate_settlementdate_settle`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'settlement_date' in params:
            query_params.append(('settlementDate', params['settlement_date']))  # noqa: E501
        if 'settlement_period' in params:
            query_params.append(('settlementPeriod', params['settlement_period']))  # noqa: E501
            collection_formats['settlementPeriod'] = 'multi'  # noqa: E501
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/evolution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_history_publishtime_publishtime(self, publish_time, **kwargs):  # noqa: E501
        """History of the day-ahead demand forecast (NDF, TSDF)  # noqa: E501

        This endpoint provides the day and day ahead demand forecast and are categorized as National Demand Forecast (NDF) and Transmission System Demand Forecast (TSDF);  the forecast values are derived by NGESO and is based on historically metered generation output for Great Britain.  The data is updated every 30 minutes and within 15 minutes of the end of the effective Settlement Period.  NDF takes into account transmission losses but but does not include station transformer load, pumped storage demand or Interconnector demand;  the data is reported only at national level; and TSDF which takes into account transmission losses , station transformer load, pumped storage demand and interconnector demand.  The data is reported both at national and boundary (system zones) level. Boundary data only available for Transmission System Demand Forecast (TSDF).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_history_publishtime_publishtime(publish_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime publish_time: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_history_publishtime_publishtime_with_http_info(publish_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_history_publishtime_publishtime_with_http_info(publish_time, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_history_publishtime_publishtime_with_http_info(self, publish_time, **kwargs):  # noqa: E501
        """History of the day-ahead demand forecast (NDF, TSDF)  # noqa: E501

        This endpoint provides the day and day ahead demand forecast and are categorized as National Demand Forecast (NDF) and Transmission System Demand Forecast (TSDF);  the forecast values are derived by NGESO and is based on historically metered generation output for Great Britain.  The data is updated every 30 minutes and within 15 minutes of the end of the effective Settlement Period.  NDF takes into account transmission losses but but does not include station transformer load, pumped storage demand or Interconnector demand;  the data is reported only at national level; and TSDF which takes into account transmission losses , station transformer load, pumped storage demand and interconnector demand.  The data is reported both at national and boundary (system zones) level. Boundary data only available for Transmission System Demand Forecast (TSDF).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_history_publishtime_publishtime_with_http_info(publish_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime publish_time: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['publish_time', 'boundary', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_history_publishtime_publishtime" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'publish_time' is set
        if ('publish_time' not in params or
                params['publish_time'] is None):
            raise ValueError("Missing the required parameter `publish_time` when calling `get_forecast_demand_day_ahead_history_publishtime_publishtime`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'publish_time' in params:
            query_params.append(('publishTime', params['publish_time']))  # noqa: E501
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_latest_from_from_to_to(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the latest forecasted demand (NDF, TSDF)  # noqa: E501

        This endpoint allows for retrieving latest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the latest published forecast for each settlement period is shown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_latest_from_from_to_to(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_latest_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_latest_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_latest_from_from_to_to_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the latest forecasted demand (NDF, TSDF)  # noqa: E501

        This endpoint allows for retrieving latest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the latest published forecast for each settlement period is shown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_latest_from_from_to_to_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'boundary', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_latest_from_from_to_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_forecast_demand_day_ahead_latest_from_from_to_to`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_forecast_demand_day_ahead_latest_from_from_to_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_latest_stream_from_from_to_to(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the latest forecasted demand (NDF, TSDF) stream  # noqa: E501

        This endpoint allows for retrieving a stream of latest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the latest published forecast for each settlement period is shown.  This endpoint has an optimised JSON payload and aimed at frequent request for the day-ahead demand forecast data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_latest_stream_from_from_to_to(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :return: list[InsightsApiModelsServiceDayAheadDemandForecastRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_latest_stream_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_latest_stream_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_latest_stream_from_from_to_to_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Historic view of the latest forecasted demand (NDF, TSDF) stream  # noqa: E501

        This endpoint allows for retrieving a stream of latest day-ahead demand forecast data from National Grid ESO.  Results are filtered by settlement time, and only the latest published forecast for each settlement period is shown.  This endpoint has an optimised JSON payload and aimed at frequent request for the day-ahead demand forecast data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_latest_stream_from_from_to_to_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param str boundary: Omitting this will return only national data. Specifying boundary=zonal will return only zonal data.
        :return: list[InsightsApiModelsServiceDayAheadDemandForecastRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'boundary']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_latest_stream_from_from_to_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_forecast_demand_day_ahead_latest_stream_from_from_to_to`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_forecast_demand_day_ahead_latest_stream_from_from_to_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/latest/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InsightsApiModelsServiceDayAheadDemandForecastRow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_day_ahead_peak(self, **kwargs):  # noqa: E501
        """Peak forecasted demand per day (TSDF)  # noqa: E501

        This endpoint allows for retrieving the peak demand that is forecast for each day from National Grid ESO.  Results are filtered by a range of Date parameters.  Results default to yesterday, today and tomorrow if no parameters are supplied.                Date parameters must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_peak(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str boundary:
        :param date _from: Format - date (as full-date in RFC3339). The start of the requested date range.
        :param date to: Format - date (as full-date in RFC3339). The end of the requested date range.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastPeak
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_day_ahead_peak_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_day_ahead_peak_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forecast_demand_day_ahead_peak_with_http_info(self, **kwargs):  # noqa: E501
        """Peak forecasted demand per day (TSDF)  # noqa: E501

        This endpoint allows for retrieving the peak demand that is forecast for each day from National Grid ESO.  Results are filtered by a range of Date parameters.  Results default to yesterday, today and tomorrow if no parameters are supplied.                Date parameters must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_day_ahead_peak_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str boundary:
        :param date _from: Format - date (as full-date in RFC3339). The start of the requested date range.
        :param date to: Format - date (as full-date in RFC3339). The end of the requested date range.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastPeak
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['boundary', '_from', 'to', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_day_ahead_peak" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'boundary' in params:
            query_params.append(('boundary', params['boundary']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/day-ahead/peak', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastPeak',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_total_day_ahead_from_from_to_to(self, _from, to, **kwargs):  # noqa: E501
        """Day-ahead total load forecast (DATL/B0620)  # noqa: E501

        This endpoint provides day-ahead total load forecast per bidding zone data.  It can be filtered by settlement period dates.                This API endpoint has a maximum range of 7 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_total_day_ahead_from_from_to_to(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param int settlement_period_from: Format - int32.
        :param int settlement_period_to: Format - int32.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyDayAheadTotalLoadPerBiddingZone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_total_day_ahead_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_total_day_ahead_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_total_day_ahead_from_from_to_to_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Day-ahead total load forecast (DATL/B0620)  # noqa: E501

        This endpoint provides day-ahead total load forecast per bidding zone data.  It can be filtered by settlement period dates.                This API endpoint has a maximum range of 7 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_total_day_ahead_from_from_to_to_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format - date-time (as date-time in RFC3339). (required)
        :param datetime to: Format - date-time (as date-time in RFC3339). (required)
        :param int settlement_period_from: Format - int32.
        :param int settlement_period_to: Format - int32.
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyDayAheadTotalLoadPerBiddingZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'settlement_period_from', 'settlement_period_to', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_total_day_ahead_from_from_to_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_forecast_demand_total_day_ahead_from_from_to_to`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_forecast_demand_total_day_ahead_from_from_to_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'settlement_period_from' in params:
            query_params.append(('settlementPeriodFrom', params['settlement_period_from']))  # noqa: E501
        if 'settlement_period_to' in params:
            query_params.append(('settlementPeriodTo', params['settlement_period_to']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/total/day-ahead', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyDayAheadTotalLoadPerBiddingZone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_total_week_ahead_from_from_to_to(self, _from, to, **kwargs):  # noqa: E501
        """Week-ahead total load forecast (WATL/B0630)  # noqa: E501

        This endpoint returns week-ahead total load forecast per bidding zone data with the minimum possible  and maximum available total loads in MW values, filtered by forecast week.                For a given forecast date, if more than one forecast has been published, only the most recent forecast  is returned.                This API endpoint has a maximum range of 367 days.                Date parameters must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_total_week_ahead_from_from_to_to(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Format - date (as full-date in RFC3339). The earliest forecast date to include. (required)
        :param date to: Format - date (as full-date in RFC3339). The latest forecast date to include. (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyWeekAheadTotalLoadPerBiddingZone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_total_week_ahead_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_total_week_ahead_from_from_to_to_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_total_week_ahead_from_from_to_to_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Week-ahead total load forecast (WATL/B0630)  # noqa: E501

        This endpoint returns week-ahead total load forecast per bidding zone data with the minimum possible  and maximum available total loads in MW values, filtered by forecast week.                For a given forecast date, if more than one forecast has been published, only the most recent forecast  is returned.                This API endpoint has a maximum range of 367 days.                Date parameters must be provided in the exact format yyyy-MM-dd.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_total_week_ahead_from_from_to_to_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Format - date (as full-date in RFC3339). The earliest forecast date to include. (required)
        :param date to: Format - date (as full-date in RFC3339). The latest forecast date to include. (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyWeekAheadTotalLoadPerBiddingZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_total_week_ahead_from_from_to_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_forecast_demand_total_week_ahead_from_from_to_to`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_forecast_demand_total_week_ahead_from_from_to_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/total/week-ahead', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyWeekAheadTotalLoadPerBiddingZone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_total_week_ahead_latest(self, **kwargs):  # noqa: E501
        """Latest week-ahead total load forecast (WATL/B0630)  # noqa: E501

        This endpoint returns the most recently published WATL / B0630 forecast.                This forecast is the week-ahead total load forecast per bidding zone data,  with minimum possible and maximum available total loads in MW values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_total_week_ahead_latest(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyWeekAheadTotalLoadPerBiddingZone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_total_week_ahead_latest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_total_week_ahead_latest_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forecast_demand_total_week_ahead_latest_with_http_info(self, **kwargs):  # noqa: E501
        """Latest week-ahead total load forecast (WATL/B0630)  # noqa: E501

        This endpoint returns the most recently published WATL / B0630 forecast.                This forecast is the week-ahead total load forecast per bidding zone data,  with minimum possible and maximum available total loads in MW values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_total_week_ahead_latest_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyWeekAheadTotalLoadPerBiddingZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_total_week_ahead_latest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/total/week-ahead/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyWeekAheadTotalLoadPerBiddingZone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_weekly(self, **kwargs):  # noqa: E501
        """One-year demand forecast (NDFW, TSDFW)  # noqa: E501

        This endpoint provides the latest weekly forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_weekly(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_weekly_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_weekly_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forecast_demand_weekly_with_http_info(self, **kwargs):  # noqa: E501
        """One-year demand forecast (NDFW, TSDFW)  # noqa: E501

        This endpoint provides the latest weekly forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_weekly_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_weekly" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/weekly', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek(self, forecast_year, forecast_week, **kwargs):  # noqa: E501
        """Evolution of the one-year demand forecast over time  (NDFW, TSDFW)  # noqa: E501

        This endpoint provides all weekly demand forecasts over time for a given forecast Year and Week  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek(forecast_year, forecast_week, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int forecast_year: Format - int32. (required)
        :param int forecast_week: Format - int32. (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek_with_http_info(forecast_year, forecast_week, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek_with_http_info(forecast_year, forecast_week, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek_with_http_info(self, forecast_year, forecast_week, **kwargs):  # noqa: E501
        """Evolution of the one-year demand forecast over time  (NDFW, TSDFW)  # noqa: E501

        This endpoint provides all weekly demand forecasts over time for a given forecast Year and Week  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek_with_http_info(forecast_year, forecast_week, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int forecast_year: Format - int32. (required)
        :param int forecast_week: Format - int32. (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forecast_year', 'forecast_week', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forecast_year' is set
        if ('forecast_year' not in params or
                params['forecast_year'] is None):
            raise ValueError("Missing the required parameter `forecast_year` when calling `get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek`")  # noqa: E501
        # verify the required parameter 'forecast_week' is set
        if ('forecast_week' not in params or
                params['forecast_week'] is None):
            raise ValueError("Missing the required parameter `forecast_week` when calling `get_forecast_demand_weekly_evolution_forecastyear_forecastyear_forecastweek`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'forecast_year' in params:
            query_params.append(('forecastYear', params['forecast_year']))  # noqa: E501
        if 'forecast_week' in params:
            query_params.append(('forecastWeek', params['forecast_week']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/weekly/evolution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_demand_weekly_history_publishtime_publishtime(self, publish_time, **kwargs):  # noqa: E501
        """History of the one-year demand forecast (NDFW, TSDFW)  # noqa: E501

        Retrieve historical weekly forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_weekly_history_publishtime_publishtime(publish_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime publish_time: Format - date-time (as date-time in RFC3339). (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_demand_weekly_history_publishtime_publishtime_with_http_info(publish_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_demand_weekly_history_publishtime_publishtime_with_http_info(publish_time, **kwargs)  # noqa: E501
            return data

    def get_forecast_demand_weekly_history_publishtime_publishtime_with_http_info(self, publish_time, **kwargs):  # noqa: E501
        """History of the one-year demand forecast (NDFW, TSDFW)  # noqa: E501

        Retrieve historical weekly forecast demand data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_demand_weekly_history_publishtime_publishtime_with_http_info(publish_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime publish_time: Format - date-time (as date-time in RFC3339). (required)
        :param str format: Response data format. Use json/xml to include metadata.
        :return: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['publish_time', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_demand_weekly_history_publishtime_publishtime" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'publish_time' is set
        if ('publish_time' not in params or
                params['publish_time'] is None):
            raise ValueError("Missing the required parameter `publish_time` when calling `get_forecast_demand_weekly_history_publishtime_publishtime`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'publish_time' in params:
            query_params.append(('publishTime', params['publish_time']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/forecast/demand/weekly/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesDemandForecastDemandForecastWeekly',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
